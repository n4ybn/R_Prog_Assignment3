setwd("C:/Downloads/Coursera/R_Prog_Assignment3")
outcome <- read.csv("outcome-of-care-measures.csv",colClasses = "character")
head(outcome)
View(outcome)
ncol(outcome)
nrow(outcome)
names(outcome)
cn <- names(outcome)
cn
source('C:/Downloads/Coursera/R_Prog_Assignment3/load_outcome_file.R')
source('C:/Downloads/Coursera/R_Prog_Assignment3/load_outcome_file.R')
source('C:/Downloads/Coursera/R_Prog_Assignment3/load_outcome_file.R')
source('C:/Downloads/Coursera/R_Prog_Assignment3/load_outcome_file.R')
source('C:/Downloads/Coursera/R_Prog_Assignment3/load_outcome_file.R')
cn
outcome <- read.csv("outcome-of-care-measures.csv",colClasses = "character")
outcome <- read.csv("outcome-of-care-measures.csv",colClasses = "character")
valid_states <- outcome[,7]
valid_states <- unique(utcome[,7])
valid_states <- unique(outcome[,7])
valid_states
list(valid_state="AL")
list(valid_state="GA")
list(valid_state="XX")
names(valid_states)
str(valid_states)
a <- valid_states("AL")
a <- valid_states(["AL"])
a <- valid_states(="AL")
a <- valid_states[valid_states="AL"]
a
str(a)
summary(valid_states)
for (i in valid_states) {if (i="AZ") { print(i)}}
for (i in valid_states) {if (i="AZ") { print(i)} else {print("Not Found")}}
for (i in valid_states) {if (i = "AZ") { print(i)} else {print("Not Found")}}
for (i in valid_states()) {if (i = "AZ") { print(i)} else {print("Not Found")}}
for (i in valid_states) { if (i = "AZ") { print(i)} else {print("Not Found")}}
for (i in valid_states) { if (i = "AZ") { print(i)} else {print("Not Found")}}
for (i in valid_states) {
if (i = "AZ") {
if (i == "AZ") {
}
source('C:/Downloads/Coursera/R_Prog_Assignment3/best.R')
source('C:/Downloads/Coursera/R_Prog_Assignment3/best.R')
for (i in valid_states) { if (i == "AZ") { print(i)} else {print("Not Found")}}
source('C:/Downloads/Coursera/R_Prog_Assignment3/best.R')
for (i in valid_states) { if (i == "AZ") { print(i)} else {print(c("Not Found",i))}}
source('C:/Downloads/Coursera/R_Prog_Assignment3/best.R')
best("DD","fun")
source('C:/Downloads/Coursera/R_Prog_Assignment3/best.R')
best("DD","fun")
source('C:/Downloads/Coursera/R_Prog_Assignment3/best.R')
source('C:/Downloads/Coursera/R_Prog_Assignment3/best.R')
source('C:/Downloads/Coursera/R_Prog_Assignment3/best.R')
best("DD","fun")
debugSource('C:/Downloads/Coursera/R_Prog_Assignment3/best.R')
if (notvalid) {
}
best("DD","fun")
source('C:/Downloads/Coursera/R_Prog_Assignment3/best.R')
best("DD","fun")
source('C:/Downloads/Coursera/R_Prog_Assignment3/best.R')
best("DD","fun")
source('C:/Downloads/Coursera/R_Prog_Assignment3/best.R')
source('C:/Downloads/Coursera/R_Prog_Assignment3/best.R')
source('C:/Downloads/Coursera/R_Prog_Assignment3/best.R')
best("DD","fun")
valid_outcomes <- c("heart attack","pneumonia","heart failure")
source('C:/Downloads/Coursera/R_Prog_Assignment3/best.R')
best("DD","fun")
source('C:/Downloads/Coursera/R_Prog_Assignment3/best.R')
source('C:/Downloads/Coursera/R_Prog_Assignment3/best.R')
best("DD","fun")
best("CA","fun")
source('C:/Downloads/Coursera/R_Prog_Assignment3/best.R')
best("CA","fun")
options
source('C:/Downloads/Coursera/R_Prog_Assignment3/best.R')
best("CA","fun")
source('C:/Downloads/Coursera/R_Prog_Assignment3/best.R')
best("CA","fun")
source('C:/Downloads/Coursera/R_Prog_Assignment3/best.R')
best("CA","fun")
best("CTT","fun")
source('C:/Downloads/Coursera/R_Prog_Assignment3/best.R')
best("CTT","fun")
source('C:/Downloads/Coursera/R_Prog_Assignment3/best.R')
best("CTT","fun")
best("CA","fun")
source('C:/Downloads/Coursera/R_Prog_Assignment3/best.R')
best("CA","fun")
best("CTT","fun")
source('C:/Downloads/Coursera/R_Prog_Assignment3/best.R')
best("CTT","fun")
best("CA","fun")
best("CA","heart attack")
best("CA","heart attack")
best("CA","pneumonia")
source('C:/Downloads/Coursera/R_Prog_Assignment3/best.R')
best("CA","pneumonia")
best("CA","heart attack")
best("CA","heart attacks")
source('C:/Downloads/Coursera/R_Prog_Assignment3/best.R')
names(outcome)
namelist <- names(outcome)
namelist["heart attach"]
namelist["heart attack"]
namelist[["heart attack"]]
source('C:/Downloads/Coursera/R_Prog_Assignment3/best.R')
source('C:/Downloads/Coursera/R_Prog_Assignment3/best.R')
best("CA","heart attacks")
namelist[["heart attack"]]
best("CA","heart attack")
debugSource('C:/Downloads/Coursera/R_Prog_Assignment3/best.R')
best("CA","heart attack")
str HA_counts
str(HA_counts)
str(HF_counts)
str(HN_counts)
str(PN_counts
)
HA_counts <-num(HA_counts)
HA_counts <-numeric(HA_counts)
HA_counts <- as.numeric(HA_counts)
debugSource('C:/Downloads/Coursera/R_Prog_Assignment3/best.R')
best("CA","heart attack")
min(PN_counts)
summary(PN_counts)
str(PN_counts)
HASort <- sort(HA_counts)
HASort <- sort(HA_counts,NA.last)
HASort <- sort(HA_counts,na.last=TRUE)
best("CA","heart attack")
debugSource('C:/Downloads/Coursera/R_Prog_Assignment3/best.R')
best("CA","heart attack")
debugSource('C:/Downloads/Coursera/R_Prog_Assignment3/best.R')
best("CA","heart attack")
reportdata <- data.frame(HA_counts,HF_counts,PN_counts,row.names = Hospitals)
reportdata <- data.frame(HA_counts,HF_counts,PN_counts,Hospitals)
View(reportdata)
summary(reportdata)
dplyr
?dplyr
library(dplry)
install.packages("dplry")
install.packages("tidyr")
library(dplyr)
library(tidyr)
debugSource('C:/Downloads/Coursera/R_Prog_Assignment3/best.R')
best("CA","heart attack")
reportdata <- data.frame(HA_counts,HF_counts,PN_counts,Hospitals)
View(reportdata)
HA_sorted <- arrange(reportdata,HA_Counts)
HA_sorted <- arrange(reportdata,HA_ounts)
HA_sorted <- arrange(reportdata,HA_counts)
View(HA_sorted)
HA_sorted_Hosp <- arrange(HA_sorted,Hospitals)
View(HA_sorted_Hosp)
select(reportdata,min(HA_counts))
summarise(HA_sorted,min())
summarise(HA_sorted,min(HA_counts))
View(HA_sorted)
HA_Counts_min <- min(HA_Counts)
HA_Counts_min <- min(HA_counts)
HA_Counts_min <- min(sort(HA_Counts))
HA_Counts_min <- min(sort(HA_counts))
HA_Hospitals <- HA_sorted[HA_Counts_min,,]
View(HA_Hospitals)
HA_Hospitals <- HA_sorted[HA_Counts_min+6,,]
View(HA_Hospitals)
HA_Hospitals <- HA_sorted[HA_counts==HA_Counts_min]
HA_Hospitals <- HA_sorted[[HA_counts==HA_Counts_min]]
HA_Hospitals <- HA_sorted[HA_counts==HA_Counts_min]
HA_Hospitals <- select(HA_sorted,HA_sorted$HA_counts==HA_Counts_min)
HA_Hospitals <- HA_sorted[HA_sorted$HA_counts==HA_Counts_min]
HA_Hospitals <- HA_sorted[HA_sorted$HA_counts=HA_Counts_min]
debugSource('C:/Downloads/Coursera/R_Prog_Assignment3/best.R')
